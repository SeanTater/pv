name: Release

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  build-binaries:
    name: Build Cross-Platform Binaries
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: pv-linux-x86_64
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: pv-windows-x86_64.exe
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            name: pv-macos-x86_64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            name: pv-macos-arm64
            use_cross: false
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build with cross (Linux musl)
      if: matrix.use_cross
      run: |
        if ! command -v cross &> /dev/null; then
          cargo install cross --git https://github.com/cross-rs/cross
        fi
        cross build --release --target ${{ matrix.target }}

    - name: Build native (Windows/macOS)
      if: '!matrix.use_cross'
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/pv

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: target/${{ matrix.target }}/release/pv${{ runner.os == 'Windows' && '.exe' || '' }}
        retention-days: 30

  flatpak:
    name: Build Flatpak
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-23.08
      options: --privileged
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build Flatpak
      uses: flatpak/flatpak-github-actions/flatpak-builder@v6
      with:
        bundle: pv.flatpak
        manifest-path: com.github.SeanTater.pv.yml
        cache-key: flatpak-builder-${{ github.sha }}
        
    - name: Upload Flatpak Bundle
      uses: actions/upload-artifact@v4
      with:
        name: pv-flatpak-${{ github.sha }}
        path: pv.flatpak
        retention-days: 30

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install toml-cli
      run: cargo install toml-cli

    - name: Verify version matches tag
      run: test "v$(toml get -r Cargo.toml package.version)" = "${{ github.ref_name }}"

    - name: Publish to crates.io
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-binaries, flatpak, publish-crates]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare binaries for release
      run: |
        # Rename and set permissions for binaries
        mv ./artifacts/pv-linux-x86_64/pv ./artifacts/pv-linux-x86_64-binary
        mv ./artifacts/pv-windows-x86_64.exe/pv.exe ./artifacts/pv-windows-x86_64.exe
        mv ./artifacts/pv-macos-x86_64/pv ./artifacts/pv-macos-x86_64-binary
        mv ./artifacts/pv-macos-arm64/pv ./artifacts/pv-macos-arm64-binary
        
        # Set executable permissions
        chmod +x ./artifacts/pv-linux-x86_64-binary
        chmod +x ./artifacts/pv-macos-x86_64-binary
        chmod +x ./artifacts/pv-macos-arm64-binary
        
        # List all files for verification
        ls -la ./artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./artifacts/pv-linux-x86_64-binary
          ./artifacts/pv-windows-x86_64.exe
          ./artifacts/pv-macos-x86_64-binary
          ./artifacts/pv-macos-arm64-binary
          ./artifacts/pv-flatpak-${{ github.sha }}/pv.flatpak
        name: Release ${{ github.ref_name }}
        body: |
          ## Installation

          ### Pre-built Binaries

          #### Linux (x86_64, static)
          ```bash
          curl -L -o pv https://github.com/SeanTater/pv/releases/download/${{ github.ref_name }}/pv-linux-x86_64-binary
          chmod +x pv
          sudo mv pv /usr/local/bin/
          ```

          #### Windows (x86_64)
          Download [`pv-windows-x86_64.exe`](https://github.com/SeanTater/pv/releases/download/${{ github.ref_name }}/pv-windows-x86_64.exe) and rename to `pv.exe`, then add to your PATH.

          #### macOS (Intel)
          ```bash
          curl -L -o pv https://github.com/SeanTater/pv/releases/download/${{ github.ref_name }}/pv-macos-x86_64-binary
          chmod +x pv
          sudo mv pv /usr/local/bin/
          ```

          #### macOS (Apple Silicon)
          ```bash
          curl -L -o pv https://github.com/SeanTater/pv/releases/download/${{ github.ref_name }}/pv-macos-arm64-binary
          chmod +x pv
          sudo mv pv /usr/local/bin/
          ```

          ### Package Managers

          #### Flatpak (Linux)
          ```bash
          curl -L -o pv.flatpak https://github.com/SeanTater/pv/releases/download/${{ github.ref_name }}/pv.flatpak
          flatpak install pv.flatpak
          ```

          ### From crates.io
          ```bash
          cargo install pv
          ```

          ### From Source
          ```bash
          cargo install --git https://github.com/SeanTater/pv.git --tag ${{ github.ref_name }}
          ```

          ## Verification
          Verify the installation:
          ```bash
          pv --version
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}